public with sharing class AccountContactController {

    @AuraEnabled(cacheable=true)
    public static List<Account> getAccountsAndContacts(String accountIds) {
        String query = 'SELECT Id, Name, (SELECT Id, FirstName, LastName, Email FROM Contacts) FROM Account';
        
        // Dynamically add WHERE clause if accountIds are provided
        if (accountIds != null && accountIds != '') {
            query += ' WHERE Id IN (' + accountIds + ')';
        }
        
        // Execute the dynamic query
        List<Account> accounts = Database.query(query);
        return accounts;
    }

    @AuraEnabled
    public static String createContact(String firstName, String lastName, String email, Id accountId) {
        try {
            Contact newContact = new Contact(
                FirstName = firstName,
                LastName = lastName,
                Email = email,
                AccountId = accountId
            );
            insert newContact;
            return 'Success';
        } catch (Exception e) {
            throw new AuraHandledException('Error creating contact: ' + e.getMessage());
        }
    }
}


import { LightningElement, wire, track } from 'lwc';
import getAccountsAndContacts from '@salesforce/apex/AccountContactController.getAccountsAndContacts';
import createContact from '@salesforce/apex/AccountContactController.createContact';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';

export default class AccountContact extends LightningElement {
    @track accounts;
    @track showForm = false;
    @track newContact = { firstName: '', lastName: '', email: '', accountId: '' };
    @track selectedAccountId;
    wiredAccountsResult;

    // Example list of account IDs (you can dynamically update this)
    accountIds = "'0015g00000KoEc8AAF', '0015g00000KoEe9AAF'"; // Example IDs

    // Fetch accounts and contacts data based on dynamic account IDs
    @wire(getAccountsAndContacts, { accountIds: '$accountIds' }) // Dynamically pass the account IDs
    wiredAccounts(result) {
        this.wiredAccountsResult = result;
        if (result.data) {
            this.accounts = result.data;
        } else if (result.error) {
            this.showToast('Error', 'Error fetching accounts', 'error');
        }
    }

    // Handle form field changes
    handleInputChange(event) {
        const field = event.target.name;
        this.newContact[field] = event.target.value;
    }

    // Show the contact creation modal for the selected account
    handleShowForm(event) {
        const accountId = event.target.dataset.accountId;
        if (accountId) {
            this.selectedAccountId = accountId;
            this.showForm = true;
        }
    }

    // Handle contact creation
    handleCreateContact() {
        const { firstName, lastName, email } = this.newContact;

        if (!firstName || !lastName || !email) {
            this.showToast('Error', 'All fields are required', 'error');
            return;
        }

        createContact({ firstName, lastName, email, accountId: this.selectedAccountId })
            .then(() => {
                this.showToast('Success', 'Contact created successfully', 'success');
                this.showForm = false;
                // Refresh the accounts list
                return refreshApex(this.wiredAccountsResult);
            })
            .catch(error => {
                let errorMessage = 'Error creating contact';
                if (error.body && error.body.message) {
                    errorMessage = error.body.message;
                }
                this.showToast('Error', errorMessage, 'error');
            });
    }

    // Handle modal cancellation
    handleCancel() {
        this.showForm = false;
    }

    // Show toast messages
    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title,
            message,
            variant,
        });
        this.dispatchEvent(event);
    }
}