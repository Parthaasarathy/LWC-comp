import { LightningElement, wire, api, track } from 'lwc';
import getContacts from '@salesforce/apex/AccountContactController.getContacts';
import createContact from '@salesforce/apex/AccountContactController.createContact';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';

export default class AccountContact extends LightningElement {
    @api recordId; // Account Id passed from the parent component or page
    @track contacts;
    @track error;
    @track newContact = { firstName: '', lastName: '', email: '' };

    // Columns for lightning-datatable
    columns = [
        { label: 'First Name', fieldName: 'FirstName', type: 'text' },
        { label: 'Last Name', fieldName: 'LastName', type: 'text' },
        { label: 'Email', fieldName: 'Email', type: 'email' }
    ];

    // Fetch contacts using the wire service
    @wire(getContacts, { accountId: '$recordId' })
    wiredContacts({ error, data }) {
        if (data) {
            this.contacts = data;
            this.error = undefined;
        } else if (error) {
            this.error = error;
            this.contacts = undefined;
        }
    }

    // Handle form field changes
    handleChange(event) {
        const field = event.target.name;
        this.newContact[field] = event.target.value;
    }

    // Create new contact on form submission
    handleCreateContact() {
        const { firstName, lastName, email } = this.newContact;
        
        // Validate required fields
        if (!firstName || !lastName) {
            this.showToast('Error', 'First Name and Last Name are required', 'error');
            return;
        }

        createContact({ firstName, lastName, email, accountId: this.recordId })
            .then(() => {
                this.showToast('Success', 'Contact created successfully', 'success');
                // Refresh the contacts list after creating the new contact
                return refreshApex(this.contacts);
            })
            .catch((error) => {
                let errorMessage = 'Unknown error'; // Default message in case error structure is unexpected
                if (error && error.body && error.body.message) {
                    errorMessage = error.body.message;
                }
                this.showToast('Error', errorMessage, 'error');
            });
    }

    // Show toast messages for success or error
    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title,
            message,
            variant,
        });
        this.dispatchEvent(event);
    }
}