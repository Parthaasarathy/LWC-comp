import { LightningElement, track } from 'lwc';
import getCurrentMonthContracts from '@salesforce/apex/GetContractData.getCurrentMonthContracts';

export default class ContractTabs extends LightningElement {
    @track months = [];
    @track activeTab = '';
    @track contracts = [];
    @track searchKey = '';
    @track renewalStatus = 'None';
    @track openEnrollmentStatus = 'None';

    columns = [
        {
            label: 'Action',
            type: 'button-icon',
            fieldName: 'actions',
            typeAttributes: {
                iconName: 'utility:threedots_vertical',
                alternativeText: 'Actions',
                name: 'actions',
                menuAlignment: 'auto',
                variant: 'border-filled'
            }
        },
        { label: 'Account Name', fieldName: 'AccountName', type: 'text' },
        { label: 'Group ID', fieldName: 'Group_ID__c', type: 'text' },
        { label: 'Renewal Date', fieldName: 'Renewal_Date__c', type: 'date' },
        { label: 'No of Employees', fieldName: 'No_of_Employees__c', type: 'number' },
        { label: 'No of Active Members', fieldName: 'No_of_Active_Members__c', type: 'number' },
        { label: 'Current Premium', fieldName: 'Current_Premium__c', type: 'currency' },
        { label: 'Renewal Premium', fieldName: 'Renewal_Premium__c', type: 'currency' },
        { label: '% Change', fieldName: 'Change__c', type: 'currency' },
        { label: 'Renewal Status', fieldName: 'Renewal_Status__c', type: 'text' },
        { label: 'Open Enrollment Status', fieldName: 'Open_Enrollment_Status__c', type: 'text' },
        { label: 'Renewal Iterations', fieldName: 'Renewal_Iterations__c', type: 'number' }
    ];

    connectedCallback() {
        this.initializeMonths();
    }

    initializeMonths() {
        const today = new Date();
        for (let i = -3; i <= 8; i++) {
            let date = new Date(today.getFullYear(), today.getMonth() + i, 1);
            this.months.push({
                label: `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`,
                key: `${date.getFullYear()}-${date.getMonth() + 1}`
            });
        }
        this.activeTab = this.months[3].key; // Set current month as the active tab
        this.loadContracts(this.activeTab);
    }

    handleActiveTab(event) {
        const tabValue = event.detail.value;
        this.activeTab = tabValue;
        this.loadContracts(tabValue);
    }

    handleSearchKeyChange(event) {
        this.searchKey = event.target.value;
    }

    handleRenewalStatusChange(event) {
        this.renewalStatus = event.target.value;
    }

    handleOpenEnrollmentStatusChange(event) {
        this.openEnrollmentStatus = event.target.value;
    }

    handleAccessShieldRenewal() {
        this.loadContracts(this.activeTab);
    }

    loadContracts(tabValue) {
        if (!tabValue) {
            return;
        }
        const [year, month] = tabValue.split('-').map(Number);
        getCurrentMonthContracts({ 
            month, 
            year, 
            searchKey: this.searchKey, 
            renewalStatus: this.renewalStatus, 
            openEnrollmentStatus: this.openEnrollmentStatus 
        })
        .then(result => {
            this.contracts = result.map(contract => ({
                ...contract,
                AccountName: contract.Account.Name
            }));
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    get renewalStatusOptions() {
        return [
            { label: 'None', value: 'None' },
            { label: 'Not Started', value: 'Not Started' },
            { label: 'In Progress', value: 'In Progress' },
            { label: 'Completed', value: 'Completed' }
        ];
    }

    get openEnrollmentStatusOptions() {
        return [
            { label: 'None', value: 'None' },
            { label: 'Not Started', value: 'Not Started' },
            { label: 'In Progress', value: 'In Progress' },
            { label: 'Completed', value: 'Completed' }
        ];
    }

    handleRowAction(event) {
        const actionName = event.detail.action.name;
        const row = event.detail.row;
        switch (actionName) {
            case 'start_renewal':
                this.startRenewal(row);
                break;
            case 'start_open_enrollment':
                this.startOpenEnrollment(row);
                break;
            case 'run_quote':
                this.runQuote(row);
                break;
            default:
        }
    }

    startRenewal(row) {
        console.log('Start Renewal for ', row);
        // Add your logic here
    }

    startOpenEnrollment(row) {
        console.log('Start Open Enrollment for ', row);
        // Add your logic here
    }

    runQuote(row) {
        console.log('Run Quote for ', row);
        // Add your logic here
    }
}