public with sharing class AccountContactController {
    
    // Method to get a list of Contacts related to an Account
    @AuraEnabled(cacheable=true)
    public static List<Contact> getContacts(Id accountId) {
        return [SELECT Id, FirstName, LastName, Email FROM Contact WHERE AccountId = :accountId];
    }

    // Method to create a new Contact
    @AuraEnabled
    public static String createContact(String firstName, String lastName, String email, Id accountId) {
        try {
            Contact newContact = new Contact(
                FirstName = firstName,
                LastName = lastName,
                Email = email,
                AccountId = accountId
            );
            insert newContact;
            return 'Success';
        } catch (Exception e) {
            throw new AuraHandledException('Error creating contact: ' + e.getMessage());
        }
    }
}

import { LightningElement, wire, api, track } from 'lwc';
import getContacts from '@salesforce/apex/AccountContactController.getContacts';
import createContact from '@salesforce/apex/AccountContactController.createContact';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class AccountContact extends LightningElement {
    @api recordId; // Account Id passed from the parent component or page
    @track contacts;
    @track error;
    @track newContact = { firstName: '', lastName: '', email: '' };

    // Fetch contacts using the wire service
    @wire(getContacts, { accountId: '$recordId' })
    wiredContacts({ error, data }) {
        if (data) {
            this.contacts = data;
            this.error = undefined;
        } else if (error) {
            this.error = error;
            this.contacts = undefined;
        }
    }

    // Handle form field changes
    handleChange(event) {
        const field = event.target.name;
        this.newContact[field] = event.target.value;
    }

    // Create new contact on form submission
    handleCreateContact() {
        const { firstName, lastName, email } = this.newContact;
        
        if (!firstName || !lastName) {
            this.showToast('Error', 'First Name and Last Name are required', 'error');
            return;
        }

        createContact({ firstName, lastName, email, accountId: this.recordId })
            .then(() => {
                this.showToast('Success', 'Contact created successfully', 'success');
                return refreshApex(this.contacts); // Refresh the contacts list
            })
            .catch((error) => {
                this.showToast('Error', error.body.message, 'error');
            });
    }

    // Show toast messages
    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title,
            message,
            variant,
        });
        this.dispatchEvent(event);
    }
}


<template>
    <lightning-card title="Contacts for Account" icon-name="standard:account">
        <!-- Display Contacts in a table -->
        <template if:true={contacts}>
            <lightning-datatable
                key-field="Id"
                data={contacts}
                columns={columns}
                hide-checkbox-column
            ></lightning-datatable>
        </template>
        <template if:true={error}>
            <div class="slds-text-color_error">{error}</div>
        </template>

        <!-- Form to create a new Contact -->
        <lightning-input label="First Name" name="firstName" value={newContact.firstName} onchange={handleChange}></lightning-input>
        <lightning-input label="Last Name" name="lastName" value={newContact.lastName} onchange={handleChange}></lightning-input>
        <lightning-input label="Email" name="email" value={newContact.email} onchange={handleChange}></lightning-input>
        <lightning-button label="Create Contact" onclick={handleCreateContact} class="slds-m-top_small" variant="brand"></lightning-button>
    </lightning-card>
</template>

.slds-m-top_small {
    margin-top: 1rem;
}