public with sharing class StudentCourseController {
    @AuraEnabled(cacheable=true)
    public static List<CourseWrapper> searchCourses(String searchTerm) {
        String searchPattern = '%' + searchTerm + '%';
        List<Course__c> courses = [
            SELECT Id, Name, Number_Of_Seat__c, Number_of_Enrolled_Students__c, Instructor__r.Name, Instructor__c, Duration__c
            FROM Course__c
            WHERE Name LIKE :searchPattern
        ];
        
        List<CourseWrapper> courseWrappers = new List<CourseWrapper>();
        for (Course__c course : courses) {
            Integer availableSeats = Integer.valueOf(course.Number_Of_Seat__c) - Integer.valueOf(course.Number_of_Enrolled_Students__c != null ? course.Number_of_Enrolled_Students__c : 0);
            courseWrappers.add(new CourseWrapper(course, availableSeats));
        }
        
        return courseWrappers;
    }

    @AuraEnabled(cacheable=true)
    public static Instructor__c getInstructorById(Id instructorId) {
        List<Instructor__c> instructors = [SELECT Id, Name, Email__c FROM Instructor__c WHERE Id = :instructorId];
        if (instructors.isEmpty()) {
            return null;
        }
        return instructors[0];
    }

    @AuraEnabled(cacheable=true)
    public static Course__c getCourseById(Id courseId) {
        return [SELECT Id, Name, Duration__c, Date__c, Number_Of_Seat__c, Instructor__r.Name FROM Course__c WHERE Id = :courseId];
    }

    @AuraEnabled
    public static void enrollStudent(String studentName, String studentEmail, Id courseId) {
        Course__c course = [SELECT Name, Instructor__r.Name, Duration__c FROM Course__c WHERE Id = :courseId];
        Instructor__c instructor = [SELECT Name FROM Instructor__c WHERE Id = :course.Instructor__c LIMIT 1];

        Student__c newStudent = new Student__c();
        newStudent.Name = studentName;
        newStudent.Email__c = studentEmail;
        newStudent.Course__c = courseId;
        insert newStudent;

        // Send email
        String emailBody = 'Dear ' + studentName + ',\n\n' +
                           'Thank you for enrolling in the course.\n\n' +
                           'Course Name: ' + course.Name + '\n' +
                           'Instructor Name: ' + instructor.Name + '\n' +
                           'Course Duration: ' + course.Duration__c + '\n\n' +
                           'Best regards,\n' +
                           'Your Training Team';

        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        email.setToAddresses(new String[] { studentEmail });
        email.setSubject('Confirmation of Enrollment in ' + course.Name);
        email.setPlainTextBody(emailBody);
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { email });
    }

    public class CourseWrapper {
        @AuraEnabled public String Id;
        @AuraEnabled public String Name;
        @AuraEnabled public String InstructorName;
        @AuraEnabled public Integer AvailableSeats;
        @AuraEnabled public String InstructorId;

        public CourseWrapper(Course__c course, Integer availableSeats) {
            this.Id = course.Id;
            this.Name = course.Name;
            this.InstructorName = course.Instructor__r.Name;
            this.InstructorId = course.Instructor__c;
            this.AvailableSeats = availableSeats;
        }
    }
}