public with sharing class CourseController {
    @AuraEnabled(cacheable=true)
    public static List<Course__c> getCoursesByInstructor(Id instructorId) {
        return [
            SELECT Id, Name, Date__c, Number_of_Enrolled_Students__c 
            FROM Course__c 
            WHERE Instructor__c = :instructorId
        ];
    }

    @AuraEnabled(cacheable=true)
    public static List<Instructor__c> getInstructors() {
        return [SELECT Id, Name FROM Instructor__c];
    }

    @AuraEnabled(cacheable=true)
    public static List<Student__c> getStudentsByCourse(Id courseId) {
        return [
            SELECT Id, Name, Email__c 
            FROM Student__c 
            WHERE Course__c = :courseId
        ];
    }
}


<template>
    <lightning-card title="Course List">
        <div class="slds-p-around_medium">
            <lightning-combobox label="Instructor" value={selectedInstructor} placeholder="Select an Instructor"
                options={instructorOptions} onchange={handleInstructorChange}></lightning-combobox>
            <lightning-button variant="brand" label="Filter" onclick={handleFilter}></lightning-button>
        </div>
        <lightning-datatable key-field="Id" data={courses} columns={columns}
                             onrowaction={handleRowAction}>
        </lightning-datatable>
    </lightning-card>

    <!-- Modal to show students -->
    <template if:true={isModalOpen}>
        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <header class="slds-modal__header">
                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse"
                            title="Close" onclick={closeModal}>
                        <lightning-icon icon-name="utility:close" alternative-text="close" size="small"></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 class="slds-text-heading_medium">Enrolled Students</h2>
                </header>
                <div class="slds-modal__content slds-p-around_medium">
                    <lightning-datatable key-field="Id" data={students} columns={studentColumns}>
                    </lightning-datatable>
                </div>
                <footer class="slds-modal__footer">
                    <lightning-button variant="neutral" label="Close" onclick={closeModal}></lightning-button>
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </template>
</template>

import { LightningElement, track, wire } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getCoursesByInstructor from '@salesforce/apex/CourseController.getCoursesByInstructor';
import getInstructors from '@salesforce/apex/CourseController.getInstructors';
import getStudentsByCourse from '@salesforce/apex/CourseController.getStudentsByCourse';

export default class CourseTable extends LightningElement {
    @track selectedInstructor = '';
    @track instructorOptions = [];
    @track courses = [];
    @track columns = [
        { label: 'Course Name', fieldName: 'Name', type: 'button', typeAttributes: { label: { fieldName: 'Name' }, name: 'view_students', variant: 'base' } },
        { label: 'Date', fieldName: 'Date__c', type: 'date' },
        { label: 'Number of Enrolled Students', fieldName: 'Number_of_Enrolled_Students__c', type: 'number' }
    ];
    @track students = [];
    @track studentColumns = [
        { label: 'Student Name', fieldName: 'Name' },
        { label: 'Email', fieldName: 'Email__c' }
    ];
    @track isModalOpen = false;

    @wire(getInstructors)
    wiredInstructors({ error, data }) {
        if (data) {
            this.instructorOptions = data.map(instructor => {
                return { label: instructor.Name, value: instructor.Id };
            });
        } else if (error) {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error loading instructors',
                    message: error.body.message,
                    variant: 'error',
                }),
            );
        }
    }

    handleInstructorChange(event) {
        this.selectedInstructor = event.target.value;
    }

    handleFilter() {
        getCoursesByInstructor({ instructorId: this.selectedInstructor })
            .then(result => {
                this.courses = result;
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error loading courses',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
    }

    handleRowAction(event) {
        const actionName = event.detail.action.name;
        const row = event.detail.row;
        if (actionName === 'view_students') {
            this.openModal(row.Id);
        }
    }

    openModal(courseId) {
        getStudentsByCourse({ courseId })
            .then(result => {
                this.students = result;
                this.isModalOpen = true;
            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error loading students',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
    }

    closeModal() {
        this.isModalOpen = false;
    }
}