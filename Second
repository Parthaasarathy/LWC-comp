import { LightningElement, wire, track } from 'lwc';
import getAccountsAndContacts from '@salesforce/apex/AccountContactController.getAccountsAndContacts';
import createContact from '@salesforce/apex/AccountContactController.createContact';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';

export default class AccountContact extends LightningElement {
    @track accounts; // To store the account and contacts data
    @track showForm = false; // Toggle to show the modal (popup form)
    @track newContact = { firstName: '', lastName: '', email: '', accountId: '' }; // New contact information
    @track selectedAccountId; // Store the selected account for creating a contact
    wiredAccountsResult; // To track the result of the wired call

    // Fetch accounts and contacts data
    @wire(getAccountsAndContacts)
    wiredAccounts(result) {
        this.wiredAccountsResult = result; // Save the result to refresh later
        if (result.data) {
            this.accounts = result.data;
        } else if (result.error) {
            this.showToast('Error', 'Error fetching accounts', 'error');
        }
    }

    // Handle form field changes
    handleInputChange(event) {
        const field = event.target.name;
        this.newContact[field] = event.target.value;
    }

    // Show the contact creation modal for the selected account
    handleShowForm(event) {
        const accountId = event.target.dataset.accountId;
        if (accountId) {
            this.selectedAccountId = accountId; // Set the selected accountId
            this.showForm = true; // Open the modal (show the form)
        }
    }

    // Handle contact creation
    handleCreateContact() {
        const { firstName, lastName, email } = this.newContact;

        if (!firstName || !lastName || !email) {
            this.showToast('Error', 'All fields are required', 'error');
            return;
        }

        createContact({ firstName, lastName, email, accountId: this.selectedAccountId })
            .then(() => {
                this.showToast('Success', 'Contact created successfully', 'success');
                this.showForm = false; // Close the modal

                // Refresh the Apex wire to get the updated list of accounts and contacts
                return refreshApex(this.wiredAccountsResult);
            })
            .catch(error => {
                let errorMessage = 'Error creating contact';
                if (error.body && error.body.message) {
                    errorMessage = error.body.message;
                }
                this.showToast('Error', errorMessage, 'error');
            });
    }

    // Handle modal cancellation
    handleCancel() {
        this.showForm = false; // Close the modal when cancel is clicked
    }

    // Show toast messages for success or error
    showToast(title, message, variant) {
        const event = new ShowToastEvent({
            title,
            message,
            variant,
        });
        this.dispatchEvent(event);
    }
}